,"Family","Genus","Other_Taxa","Tribe","FFG","FAM_TV","Habit"
,"FinalTolVal07","FinalTolVal08")
column_names <- colnames(df_input)
# Check
col_req_match <- required_columns %in% column_names
col_missing <- required_columns[!col_req_match]
shiny::runApp()
?write.csv2
write.csv2(df_input, file = "example_bugs_semicolon")
runApp()
library(BioMonTools)
?metric.values
library(BioMonTools)
shiny::runApp('inst/shiny-examples/MIEGLEtools')
install.packages('rsconnect')
install.packages('rsconnect')
library(rsconnect)
runApp('inst/shiny-examples/MIEGLEtools')
rsconnect::setAccountInfo(name='tetratech-wtr-wne', token='13F95527AA7F156AD96A1480E1E21E1C', secret='qXeDTYiBg/U6GVGYJrN16gwFLMGs6VO5SAJ0Rpjh')
rsconnect::setAccountInfo(name='tetratech-wtr-wne', token='13F95527AA7F156AD96A1480E1E21E1C', secret='qXeDTYiBg/U6GVGYJrN16gwFLMGs6VO5SAJ0Rpjh')
rsconnect::setAccountInfo(name='tetratech-wtr-wne', token='13F95527AA7F156AD96A1480E1E21E1C', secret='qXeDTYiBg/U6GVGYJrN16gwFLMGs6VO5SAJ0Rpjh')
2*2
rsconnect::setAccountInfo(name='tetratech-wtr-wne', token='13F95527AA7F156AD96A1480E1E21E1C', secret='qXeDTYiBg/U6GVGYJrN16gwFLMGs6VO5SAJ0Rpjh')
shiny::runApp('inst/shiny-examples/MIEGLEtools')
shiny::runApp('inst/shiny-examples/MIEGLEtools')
shiny::runApp()
library(devtools)  #install if needed
Sys.setenv("TAR" = "internal")  # needed for R v3.6.0
install_github("Blocktt/BioMonTools", force=TRUE, build_vignettes=TRUE)
rsconnect::showLogs()
# Create zip file
fn_4zip <- list.files(path = file.path(".", "Results")
, pattern = "^results_"
, full.names = TRUE)
shiny::runApp('inst/shiny-examples/MIEGLEtools')
runApp('inst/shiny-examples/MIEGLEtools')
# Create zip file
fn_4zip <- list.files(path = file.path(".", "Results")
, pattern = "^results_"
, full.names = TRUE)
# Create zip file
fn_4zip <- list.files(path = file.path(".", "Results")
, pattern = "^results_"
, full.names = TRUE)
runApp('inst/shiny-examples/MIEGLEtools')
utils::zip(file.path(".", "Results", "results.zip"), fn_4zip)
utils::zip(file.path(".", "Results", "results.zip"), fn_4zip)
zip::zipr(file.path(".", "Results", "results.zip"), fn_4zip) # used because regular utils::zip wasn't working
utils::zip(file.path(".", "Results", "results.zip"), fn_4zip)
n
?zipr
?list.files
library(R.utils)
df <- data.frame(x=10)
View(df)
write.csv(df, file="x1.csv")
getwd()
zip('foo.zip', file = "x.csv")
dir()
sessionInfo()
install.packages("R.utils")
library(R.utils)
df <- data.frame(x=10)
write.csv(df, file="x1.csv")
zip('foo.zip', file = "x.csv")
dir()
remove.packages(R.utils)
install.packages(c("backports", "devtools", "httr", "remotes", "vctrs"))
remove.packages(R.utils)
remove.packages("R.util")
remove.packages("R.utils")
?zip
?zip
shiny::runApp('inst/shiny-examples/MIEGLEtools')
shiny::runApp('inst/shiny-examples/MIEGLEtools')
shiny::runApp('inst/shiny-examples/MIEGLEtools')
shiny::runApp('inst/shiny-examples/MIEGLEtools')
library(MIEGLEtools)
help(package = "MIEGLEtools")
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
myPkg <- "MIEGLEtools"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
#setwd(file.path(".", myPkg))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myPkg, quick=FALSE, reload=TRUE, build_vignettes = TRUE)
getwd()
setwd("C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/MIEGLEtools")
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myPkg <- "MIEGLEtools"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
#setwd(file.path(".", myPkg))
devtools::document()
getwd()
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myPkg <- "MIEGLEtools"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
#setwd(file.path(".", myPkg))
devtools::document()
setwd("..") # return to root directory first
devtools::install(myPkg, quick=FALSE, reload=TRUE, build_vignettes = TRUE)
#
library(myPkg, character.only = TRUE)
# change wd back to package
setwd(paste0("./", myPkg))
# Help page
help(package=(myPkg))
runShiny()
install.packages(c("analogue", "badger", "data.table", "processx", "psych", "rvest", "sys", "tinytex", "xfun", "XML"))
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myPkg <- "MIEGLEtools"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
#setwd(file.path(".", myPkg))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myPkg, quick=FALSE, reload=TRUE, build_vignettes = TRUE)
# blank row above allows for the code to continue instead of waiting for user response to pkg updates.
## Reload library
library(myPkg, character.only = TRUE)
# change wd back to package
setwd(paste0("./", myPkg))
# Help page
help(package=(myPkg))
library(devtools)
?license
??license
usethis::use_mit_license()
usethis::use_mit_license("Ben Block")
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myPkg <- "MIEGLEtools"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
#setwd(file.path(".", myPkg))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myPkg, quick=FALSE, reload=TRUE, build_vignettes = TRUE)
# blank row above allows for the code to continue instead of waiting for user response to pkg updates.
## Reload library
library(myPkg, character.only = TRUE)
# change wd back to package
setwd(paste0("./", myPkg))
# Help page
help(package=(myPkg))
myPkg <- "MIEGLEtools"
library(myPkg, character.only = TRUE)
help(package=(myPkg))
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myPkg <- "MIEGLEtools"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
#setwd(file.path(".", myPkg))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myPkg, quick=FALSE, reload=TRUE, build_vignettes = TRUE)
# blank row above allows for the code to continue instead of waiting for user response to pkg updates.
## Reload library
library(myPkg, character.only = TRUE)
# change wd back to package
setwd(paste0("./", myPkg))
# Help page
help(package=(myPkg))
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myPkg <- "MIEGLEtools"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
#setwd(file.path(".", myPkg))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myPkg, quick=FALSE, reload=TRUE, build_vignettes = TRUE)
# blank row above allows for the code to continue instead of waiting for user response to pkg updates.
## Reload library
library(myPkg, character.only = TRUE)
# change wd back to package
setwd(paste0("./", myPkg))
# Help page
help(package=(myPkg))
library(MBSStools)
?metric.values
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myPkg <- "MIEGLEtools"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
#setwd(file.path(".", myPkg))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myPkg, quick=FALSE, reload=TRUE, build_vignettes = TRUE)
# blank row above allows for the code to continue instead of waiting for user response to pkg updates.
## Reload library
library(myPkg, character.only = TRUE)
# change wd back to package
setwd(paste0("./", myPkg))
# Help page
help(package=(myPkg))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myPkg <- "MIEGLEtools"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
#setwd(file.path(".", myPkg))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myPkg, quick=FALSE, reload=TRUE, build_vignettes = TRUE)
# blank row above allows for the code to continue instead of waiting for user response to pkg updates.
## Reload library
library(myPkg, character.only = TRUE)
# change wd back to package
setwd(paste0("./", myPkg))
# Help page
help(package=(myPkg))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myPkg <- "MIEGLEtools"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
#setwd(file.path(".", myPkg))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myPkg, quick=FALSE, reload=TRUE, build_vignettes = TRUE)
# blank row above allows for the code to continue instead of waiting for user response to pkg updates.
## Reload library
library(myPkg, character.only = TRUE)
# change wd back to package
setwd(paste0("./", myPkg))
# Help page
help(package=(myPkg))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(devtools)  #install if needed
Sys.setenv("TAR" = "internal")  # needed for R v3.6.0
install_github("Blocktt/MIEGLEtools", force=TRUE, build_vignettes=TRUE)
shiny::runApp('inst/shiny-examples/MIEGLEtools')
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myPkg <- "MIEGLEtools"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
#setwd(file.path(".", myPkg))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myPkg, quick=FALSE, reload=TRUE, build_vignettes = TRUE)
# blank row above allows for the code to continue instead of waiting for user response to pkg updates.
## Reload library
library(myPkg, character.only = TRUE)
# change wd back to package
setwd(paste0("./", myPkg))
# Help page
help(package=(myPkg))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(devtools)  #install if needed
Sys.setenv("TAR" = "internal")  # needed for R v3.6.0
install_github("leppott/BioMonTools", force=TRUE, build_vignettes=TRUE)
library(devtools)
install_github("Blocktt/MIEGLEtools", force=TRUE, build_vignettes=TRUE)
rsconnect::showLogs()
library(devtools)  #install if needed
install_github("Blocktt/MIEGLEtools", force=TRUE, build_vignettes=TRUE)
df_data <- read.delim("C:/Users/Ben.Block/Desktop/example_bugs_genus_BB_20200717.txt")
View(df_data)
df_metval <- BioMonTools::metric.values(fun.DF = df_data, fun.Community = "bugs", fun.MetricNames = MichMetrics, boo.Shiny = TRUE)
MichMetrics <- c("nt_CruMol"
,"pi_ffg_pred"
,"pi_ffg_shred"
,"pi_habit_cling"
,"pi_CruMol"
,"nt_tv_toler"
,"pt_NonIns"
,"pi_habit_climb"
,"pi_EPT"
,"pi_EPTNoBaeHydro"
,"pi_tv_toler"
,"nt_EPT"
,"pi_Cru"
,"pt_tv_intol"
,"nt_NonIns"
,"pi_ffg_scrap"
,"pi_IsopGastHiru"
,"pi_NonIns"
,"pi_Pleco"
,"pt_tv_toler"
,"pi_ffg_col"
,"pi_habit_sprawl"
,"nt_Trich"
,"nt_habit_cling"
,"pi_tv_intol"
)# END MichMetricss
df_metval <- BioMonTools::metric.values(fun.DF = df_data, fun.Community = "bugs", fun.MetricNames = MichMetrics, boo.Shiny = TRUE)
View(df_metval)
package_version(MIEGLEtools)
package_version(BioMonTools)
?package_version
package_version("BioMonTools")
packageDescription("BioMonTools")
packageDescription("MIEGLEtools")
?BioMonTools
library(BioMonTools)
?BioMonTools
??BioMonTools
?metric.values
install_github("Blocktt/MIEGLEtools", force=TRUE, build_vignettes=TRUE)
library(devtools)
install_github("Blocktt/MIEGLEtools", force=TRUE, build_vignettes=TRUE)
rsconnect::appDependencies()
packages <- c(BH, BioMonTools, DT)
packages <- c("BH", "BioMonTools", "DT")
library(packages)
