#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
#setwd(file.path(".", myPkg))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myPkg, quick=FALSE, reload=TRUE, build_vignettes = TRUE)
# blank row above allows for the code to continue instead of waiting for user response to pkg updates.
## Reload library
library(myPkg, character.only = TRUE)
# change wd back to package
setwd(paste0("./", myPkg))
# Help page
help(package=(myPkg))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myPkg <- "MIEGLEtools"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
#setwd(file.path(".", myPkg))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myPkg, quick=FALSE, reload=TRUE, build_vignettes = TRUE)
# blank row above allows for the code to continue instead of waiting for user response to pkg updates.
## Reload library
library(myPkg, character.only = TRUE)
# change wd back to package
setwd(paste0("./", myPkg))
# Help page
help(package=(myPkg))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(devtools)  #install if needed
Sys.setenv("TAR" = "internal")  # needed for R v3.6.0
install_github("Blocktt/MIEGLEtools", force=TRUE, build_vignettes=TRUE)
shiny::runApp('inst/shiny-examples/MIEGLEtools')
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myPkg <- "MIEGLEtools"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
#setwd(file.path(".", myPkg))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myPkg, quick=FALSE, reload=TRUE, build_vignettes = TRUE)
# blank row above allows for the code to continue instead of waiting for user response to pkg updates.
## Reload library
library(myPkg, character.only = TRUE)
# change wd back to package
setwd(paste0("./", myPkg))
# Help page
help(package=(myPkg))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(devtools)  #install if needed
Sys.setenv("TAR" = "internal")  # needed for R v3.6.0
install_github("leppott/BioMonTools", force=TRUE, build_vignettes=TRUE)
library(devtools)
install_github("Blocktt/MIEGLEtools", force=TRUE, build_vignettes=TRUE)
rsconnect::showLogs()
library(devtools)  #install if needed
install_github("Blocktt/MIEGLEtools", force=TRUE, build_vignettes=TRUE)
df_data <- read.delim("C:/Users/Ben.Block/Desktop/example_bugs_genus_BB_20200717.txt")
View(df_data)
df_metval <- BioMonTools::metric.values(fun.DF = df_data, fun.Community = "bugs", fun.MetricNames = MichMetrics, boo.Shiny = TRUE)
MichMetrics <- c("nt_CruMol"
,"pi_ffg_pred"
,"pi_ffg_shred"
,"pi_habit_cling"
,"pi_CruMol"
,"nt_tv_toler"
,"pt_NonIns"
,"pi_habit_climb"
,"pi_EPT"
,"pi_EPTNoBaeHydro"
,"pi_tv_toler"
,"nt_EPT"
,"pi_Cru"
,"pt_tv_intol"
,"nt_NonIns"
,"pi_ffg_scrap"
,"pi_IsopGastHiru"
,"pi_NonIns"
,"pi_Pleco"
,"pt_tv_toler"
,"pi_ffg_col"
,"pi_habit_sprawl"
,"nt_Trich"
,"nt_habit_cling"
,"pi_tv_intol"
)# END MichMetricss
df_metval <- BioMonTools::metric.values(fun.DF = df_data, fun.Community = "bugs", fun.MetricNames = MichMetrics, boo.Shiny = TRUE)
View(df_metval)
package_version(MIEGLEtools)
package_version(BioMonTools)
?package_version
package_version("BioMonTools")
packageDescription("BioMonTools")
packageDescription("MIEGLEtools")
?BioMonTools
library(BioMonTools)
?BioMonTools
??BioMonTools
?metric.values
install_github("Blocktt/MIEGLEtools", force=TRUE, build_vignettes=TRUE)
library(devtools)
install_github("Blocktt/MIEGLEtools", force=TRUE, build_vignettes=TRUE)
rsconnect::appDependencies()
packages <- c(BH, BioMonTools, DT)
packages <- c("BH", "BioMonTools", "DT")
library(packages)
getwd()
library(devtools)
install_github("leppott/BioMonTools", force=TRUE, build_vignettes=TRUE)
install_github("Blocktt/MIEGLEtools", force=TRUE, build_vignettes=TRUE)
# source function from metric.values.MI.R
source(file.path(".", "external", "metric.values.MI.R"))
setwd("C:/Users/Ben.Block/OneDrive - Tetra Tech, Inc/GitHub/MIEGLEtools/inst/shiny-examples/MIEGLEtools")
# source function from metric.values.MI.R
source(file.path(".", "external", "metric.values.MI.R"))
shiny::runApp()
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myPkg <- "MIEGLEtools"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
#setwd(file.path(".", myPkg))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myPkg, quick=FALSE, reload=TRUE, build_vignettes = TRUE)
# blank row above allows for the code to continue instead of waiting for user response to pkg updates.
## Reload library
library(myPkg, character.only = TRUE)
# change wd back to package
setwd(paste0("./", myPkg))
# Help page
help(package=(myPkg))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(devtools)
install_github("Blocktt/MIEGLEtools", force=TRUE, build_vignettes=TRUE)
library(devtools)
install_github("Blocktt/MIEGLEtools", force=TRUE, build_vignettes=TRUE)
library(MIEGLEtools)
?metric.values.MI
??metric.values.MI
shiny::runApp()
getwd()
shiny::runApp('inst/shiny-examples/MIEGLEtools')
shiny::runApp()
runApp()
runApp()
getwd()
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myPkg <- "MIEGLEtools"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
#setwd(file.path(".", myPkg))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myPkg, quick=FALSE, reload=TRUE, build_vignettes = TRUE)
# blank row above allows for the code to continue instead of waiting for user response to pkg updates.
## Reload library
library(myPkg, character.only = TRUE)
# change wd back to package
setwd(paste0("./", myPkg))
# Help page
help(package=(myPkg))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(devtools)
install_github("Blocktt/MIEGLEtools", force=TRUE, build_vignettes=TRUE)
shiny::runApp()
library(devtools)
install_github("Blocktt/MIEGLEtools", force=TRUE, build_vignettes=TRUE)
shiny::runApp()
sessionInfo()
# Packages
library(shiny)
library(DT)
library(ggplot2)
library(readxl)
library(reshape2)
library(dplyr)
library(utils)
library(BioMonTools)
library(knitr)
library(maps)
library(rmarkdown)
library(tidyr)
library(MIEGLEtools)
# library(plotly)
library(shinyjs) # used for download button enable
sessionInfo()
library(devtools)
install_github("Blocktt/MIEGLEtools", force=TRUE, build_vignettes=TRUE)
shiny::runApp('inst/shiny-examples/MIEGLEtools')
shiny::runApp('inst/shiny-examples/MIEGLEtools')
runApp('inst/shiny-examples/MIEGLEtools')
library(devtools)
install_github("Blocktt/MIEGLEtools", force=TRUE, build_vignettes=TRUE)
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myPkg <- "MIEGLEtools"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
#setwd(file.path(".", myPkg))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myPkg, quick=FALSE, reload=TRUE, build_vignettes = TRUE)
# blank row above allows for the code to continue instead of waiting for user response to pkg updates.
## Reload library
library(myPkg, character.only = TRUE)
# change wd back to package
setwd(paste0("./", myPkg))
# Help page
help(package=(myPkg))
library(devtools)
install_github("Blocktt/MIEGLEtools", force=TRUE, build_vignettes=TRUE)
shiny::runApp()
library(devtools)
install_github("Blocktt/MIEGLEtools", force=TRUE, build_vignettes=TRUE)
rmarkdown::render("NEWS.rmd", "all")
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
getwd()
getwd()
setwd("C:/Users/Ben.Block/OneDrive - Tetra Tech, Inc/GitHub/MIEGLEtools")
getwd()
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myPkg <- "MIEGLEtools"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
#setwd(file.path(".", myPkg))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myPkg, quick=FALSE, reload=TRUE, build_vignettes = TRUE)
# blank row above allows for the code to continue instead of waiting for user response to pkg updates.
## Reload library
library(myPkg, character.only = TRUE)
# change wd back to package
setwd(paste0("./", myPkg))
# Help page
help(package=(myPkg))
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myPkg <- "MIEGLEtools"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
#setwd(file.path(".", myPkg))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myPkg, quick=FALSE, reload=TRUE, build_vignettes = TRUE)
# blank row above allows for the code to continue instead of waiting for user response to pkg updates.
## Reload library
library(myPkg, character.only = TRUE)
# change wd back to package
setwd(paste0("./", myPkg))
# Help page
help(package=(myPkg))
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myPkg <- "MIEGLEtools"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
#setwd(file.path(".", myPkg))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myPkg, quick=FALSE, reload=TRUE, build_vignettes = TRUE)
# blank row above allows for the code to continue instead of waiting for user response to pkg updates.
## Reload library
library(myPkg, character.only = TRUE)
# change wd back to package
setwd(paste0("./", myPkg))
# Help page
help(package=(myPkg))
library(devtools)
install_github("Blocktt/MIEGLEtools", force=TRUE, build_vignettes=TRUE)
?grepl
# QC, FFG symbols
FFG_approved <- c("CG", "CF", "PR", "SC", "SH")
# QC, FFG symbols
FFG_approved <- c("CG", "CF", "PR", "SC", "SH")
test111<- c("CG", "CF", "PR", "SC", "SH", "Collector", "Predator", "Shredder",
"Shredder", "Predator", "Scraper", "Filterer")
test111 %in% FFG_approved
(test111 %in% FFG_approved) == 0
((test111 %in% FFG_approved) == 0)
sum((test111 %in% FFG_approved) == 0)
df_data <- read.delim("C:/Users/Ben.Block/OneDrive - Tetra Tech, Inc/GitHub/MIEGLEtools_Input_Tests/example_bugs_genus_BB_20200717.txt")
View(df_data)
N_FGG_wrong <- sum((df_data$FFG %in% FFG_approved) == 0, na.rm = TRUE)
if(N_FFG_wrong>0){
message(paste0(N_FFG_wrong, "taxa have the incorrect FFG descriptor, please use the following:"))
message("Replace 'Collector' with 'CG'")
message("Replace 'Filterer' with 'CF'")
message("Replace 'Predator' with 'PR'")
message("Replace 'Scraper' with 'SC'")
message("Replace 'Shredder' with 'SH'")
message("Failure to change FFG to correct coding scheme will result in incorrect metric calculations")
}
N_FFG_wrong <- sum((df_data$FFG %in% FFG_approved) == 0, na.rm = TRUE)
if(N_FFG_wrong>0){
message(paste0(N_FFG_wrong, "taxa have the incorrect FFG descriptor, please use the following:"))
message("Replace 'Collector' with 'CG'")
message("Replace 'Filterer' with 'CF'")
message("Replace 'Predator' with 'PR'")
message("Replace 'Scraper' with 'SC'")
message("Replace 'Shredder' with 'SH'")
message("Failure to change FFG to correct coding scheme will result in incorrect metric calculations")
}
df_data <- read.csv("C:/Users/Ben.Block/OneDrive - Tetra Tech, Inc/GitHub/MIEGLEtools_Input_Tests/example_bugs_genus_BB_20200717.csv")
View(df_data)
N_FFG_wrong <- sum((df_data$FFG %in% FFG_approved) == 0, na.rm = TRUE)
if(N_FFG_wrong>0){
message(paste0(N_FFG_wrong, "taxa have the incorrect FFG descriptor, please use the following:"))
message("Replace 'Collector' with 'CG'")
message("Replace 'Filterer' with 'CF'")
message("Replace 'Predator' with 'PR'")
message("Replace 'Scraper' with 'SC'")
message("Replace 'Shredder' with 'SH'")
message("Failure to change FFG to correct coding scheme will result in incorrect metric calculations")
}
View(df_data)
N_FFG_wrong <- sum((df_data$FFG %in% FFG_approved) == 0, na.rm = TRUE)
N_FFG_wrong <- sum((df_data$FFG %in% FFG_approved) == 0, na.rm = FALSE)
N_FFG_wrong <- sum((df_data$FFG %in% FFG_approved) == 0, na.rm = TRUE)
df_data[,"FFG" == ""]
df_test <- df_data
df_test[,"FFG" == ""] <- NA
View(df_test)
df_test[df_test==""] <- NA
View(df_test)
df_QC <- df_data
df_QC[df_QC==""] <- NA
View(df_QC)
N_FFG_wrong <- sum((df_QC$FFG %in% FFG_approved) == 0, na.rm = TRUE)
N_FFG_wrong <- sum((na.omit(df_QC$FFG) %in% FFG_approved) == 0, na.rm = TRUE)
N_FFG_wrong <- sum((na.omit(df_data$FFG) %in% FFG_approved) == 0)
rm(df_QC)
rm(df_test)
rm(FFG_approved)
rm(N_FFG_wrong)
rm(N_FGG_wrong)
rm(test111)
# QC, FFG symbols
df_QC <- df_data
df_QC[df_QC==""] <- NA
N_FFG_wrong <- sum((na.omit(df_QC$FFG) %in% FFG_approved) == 0)
# QC, FFG symbols
FFG_approved <- c("CG", "CF", "PR", "SC", "SH")
df_QC <- df_data
df_QC[df_QC==""] <- NA
N_FFG_wrong <- sum((na.omit(df_QC$FFG) %in% FFG_approved) == 0)
if(N_FFG_wrong>0){
message(paste0(N_FFG_wrong, "taxa have the incorrect FFG descriptor, please use the following:"))
message("Replace 'Collector' with 'CG'")
message("Replace 'Filterer' with 'CF'")
message("Replace 'Predator' with 'PR'")
message("Replace 'Scraper' with 'SC'")
message("Replace 'Shredder' with 'SH'")
message("Failure to change FFG to correct coding scheme will result in incorrect metric calculations")
}
shiny::runApp('inst/shiny-examples/MIEGLEtools')
runApp('inst/shiny-examples/MIEGLEtools')
runApp('inst/shiny-examples/MIEGLEtools')
shiny::runApp('inst/shiny-examples/MIEGLEtools')
runApp('inst/shiny-examples/MIEGLEtools')
runApp('inst/shiny-examples/MIEGLEtools')
runApp('inst/shiny-examples/MIEGLEtools')
runApp('inst/shiny-examples/MIEGLEtools')
shiny::runApp()
library(devtools)
install_github("Blocktt/MIEGLEtools", force=TRUE, build_vignettes=TRUE)
